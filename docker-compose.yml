version: '2.1'
services:
  app:
    image: test-service/base-image
    container_name: test-service
    environment: 
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:password@postgres:5432/service-db
      - FLASK_APP=app
    ports:
      - 8000:8000
    volumes: 
      - ./:/app
    depends_on:
      postgres:
        condition: service_healthy
      db-setup:
        condition: service_completed_successfully
    command: "python -m flask run --host 0.0.0.0 --port 8000"
    networks:
      - default
      - test-network

  postgres:
    image: postgis/postgis:16-3.4
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=service-db
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d service-db"]
      interval: 5s
      timeout: 5s
      retries: 1

  db-setup:
    image: test-service/base-image
    environment:
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:password@postgres:5432/service-db
    depends_on:
      postgres:
        condition: service_healthy
    command: ["python", "scripts/populate_store_data.py"]

  test:
    image: test-service/dev-image
    container_name: test-service-tests
    environment:
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:password@postgres:5432/service-db
    volumes:
      - ./:/app
    depends_on:
      postgres:
        condition: service_healthy
  
  pytest-debug:
    extends:
      service: test
    container_name: test-service-pytest-debug
    ports:
      - 5678:5678
    command: python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m
      pytest -vv --failed-first ${PYTEST_OPTIONS-} ${PYTEST_TEST-}

  base-image:
    image: test-service/base-image
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    volumes: 
      - ./:/app

  dev-image:
    image: test-service/dev-image
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    volumes: 
      - ./:/app

volumes:
  postgres:
    driver: local
  
networks:
  test-network:
    driver: bridge
    name: test-network
